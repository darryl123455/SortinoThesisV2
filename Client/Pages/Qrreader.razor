@page "/Qrreader"
@using Microsoft.AspNetCore.Authorization
@using SortinoThesisV2.Shared
@using ReactorBlazorQRCodeScanner
@using System.IO
@attribute [Authorize]
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation

<PageTitle>QR Code Reader</PageTitle>

<h3>QR Code Reader</h3>

<QRCodeScanner />

<h4>Points: @Points</h4>

@code {
    private QRCodeScannerJsInterop? _qrCodeScannerJsInterop;
    private Action<string>? _onQrCodeScanAction;
    public int Points { get; set; } = 0; // Track points

    protected override async Task OnInitializedAsync()
    {
        _onQrCodeScanAction = (code) => OnQrCodeScan(code);

        _qrCodeScannerJsInterop = new QRCodeScannerJsInterop(JS);
        await _qrCodeScannerJsInterop.Init(_onQrCodeScanAction);
    }

    // This method handles the scanned QR code content
    private void OnQrCodeScan(string code)
    {
        Console.WriteLine($"OnQrCodeScan: {code}");

        // Add points based on the scanned QR code content (material type)
        AddPoints(code);
    }

    // Add points based on the material type in the QR code
    private void AddPoints(string scannedData)
    {
        scannedData = scannedData.Trim().ToLower();  // Clean up the scanned data

        if (scannedData.Equals("biodegradable", StringComparison.OrdinalIgnoreCase))
        {
            Points += 1;
        }
        else if (scannedData.Equals("plastic", StringComparison.OrdinalIgnoreCase))
        {
            Points += 2;
        }
        else if (scannedData.Equals("metal", StringComparison.OrdinalIgnoreCase))
        {
            Points += 3;
        }
        else
        {
            Console.WriteLine("Invalid material type scanned.");
        }

        Console.WriteLine($"Current Points: {Points}");  // Log current points for debugging

        // Trigger re-render to update the UI with new points
        StateHasChanged();

        // Optionally, you can call an API to update the points on the server
        // e.g., Http.PostJsonAsync("api/points", new { Points });
    }
}
