@page "/items"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject SortinoThesisV2.Client.Services.ItemService ItemService
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@using SortinoThesisV2.Shared.Models

<h3>Item List</h3>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Description</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in items)
        {
            <tr>
                <td>@item.Name</td>
                <td>@item.Description</td>
                <td>
                    <button class="btn btn-secondary" @onclick="() => EditItem(item)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeleteItem(item.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<button class="btn btn-primary" @onclick="ShowAddItemModal">Add New Item</button>

<!-- Modal for Add/Edit Item -->
@if (isModalVisible)
{
    <div class="modal" tabindex="-1" style="display:block;" @onclick="CloseModalBackground">
        <div class="modal-dialog" @onclick="PreventCloseOnClick">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@modalTitle</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@item" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label for="name">Name</label>
                            <InputText id="name" class="form-control" @bind-Value="item.Name" />
                        </div>

                        <div class="form-group">
                            <label for="description">Description</label>
                            <InputText id="description" class="form-control" @bind-Value="item.Description" />
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<ItemModel> items = new();
    private bool isModalVisible = false;
    private string modalTitle = "Add New Item";
    private ItemModel item = new ItemModel();

    protected override async Task OnInitializedAsync()
    {
        items = await ItemService.GetItemsAsync();
    }

    private async Task ShowAddItemModal()
    {
        item = new ItemModel();  // Reset the item for new addition
        modalTitle = "Add New Item";
        isModalVisible = true;
    }

    private async Task EditItem(ItemModel existingItem)
    {
        item = existingItem; // Set item to edit
        modalTitle = "Edit Item";
        isModalVisible = true;
    }

    private async Task HandleSubmit()
    {
        if (item.Id == 0)
        {
            await ItemService.AddItemAsync(item); // Add new item
        }
        else
        {
            await ItemService.UpdateItemAsync(item.Id, item); // Update existing item
        }

        // Close the modal and refresh the item list
        isModalVisible = false;
        items = await ItemService.GetItemsAsync();
    }

    private void CloseModal()
    {
        isModalVisible = false;
    }

    private void CloseModalBackground()
    {
        // Prevent closing if clicked on the modal content area
    }

    private void PreventCloseOnClick()
    {
        // Prevent closing when the modal content is clicked
    }

    private async Task DeleteItem(int id)
    {
        await ItemService.DeleteItemAsync(id);
        items = await ItemService.GetItemsAsync();
    }
}
